///////////////////////////////////////////////////////////
//  Quality61850.cs
//  Implementation of the Class Quality61850
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:18 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.SCADA;
using TC57CIM.IEC61970.Base.Meas;
namespace TC57CIM.IEC61970.Base.Meas {
	/// <summary>
	/// Quality flags in this class are as defined in IEC 61850, except for
	/// estimatorReplaced, which has been included in this class for convenience.
	/// </summary>
	public class Quality61850 {

		/// <summary>
		/// Measurement value may be incorrect due to a reference being out of calibration.
		/// 
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean badReference;
		/// <summary>
		/// Value has been replaced by State Estimator. estimatorReplaced is not an
		/// IEC61850 quality bit but has been put in this class for convenience.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean estimatorReplaced;
		/// <summary>
		/// This identifier indicates that a supervision function has detected an internal
		/// or external failure, e.g. communication failure.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean failure;
		/// <summary>
		/// Measurement value is old and possibly invalid, as it has not been successfully
		/// updated during a specified time interval.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean oldData;
		/// <summary>
		/// Measurement value is blocked and hence unavailable for transmission.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean operatorBlocked;
		/// <summary>
		/// To prevent some overload of the communication it is sensible to detect and
		/// suppress oscillating (fast changing) binary inputs. If a signal changes in a
		/// defined time twice in the same direction (from 0 to 1 or from 1 to 0) then
		/// oscillation is detected and the detail quality identifier "oscillatory" is set.
		/// If it is detected a configured numbers of transient changes could be passed by.
		/// In this time the validity status "questionable" is set. If after this defined
		/// numbers of changes the signal is still in the oscillating state the value shall
		/// be set either to the opposite state of the previous stable value or to a
		/// defined default value. In this case the validity status "questionable" is reset
		/// and "invalid" is set as long as the signal is oscillating. If it is configured
		/// such that no transient changes should be passed by then the validity status
		/// "invalid" is set immediately in addition to the detail quality identifier
		/// "oscillatory" (used for status information only).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean oscillatory;
		/// <summary>
		/// Measurement value is beyond a predefined range of value.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean outOfRange;
		/// <summary>
		/// Measurement value is beyond the capability of being  represented properly. For
		/// example, a counter value overflows from maximum count back to a value of zero.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean overFlow;
		/// <summary>
		/// Source gives information related to the origin of a value. The value may be
		/// acquired from the process, defaulted or substituted.
		/// </summary>
		public TC57CIM.IEC61970.Base.SCADA.Source source;
		/// <summary>
		/// A correlation function has detected that the value is not consistent with other
		/// values. Typically set by a network State Estimator.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean suspect;
		/// <summary>
		/// Measurement value is transmitted for test purposes.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean test;
		/// <summary>
		/// Validity of the measurement value.
		/// </summary>
		public Validity validity;

		public Quality61850(){

		}

		~Quality61850(){

		}

		public virtual void Dispose(){

		}

	}//end Quality61850

}//end namespace Meas
///////////////////////////////////////////////////////////
//  AsynchronousMachine.cs
//  Implementation of the Class AsynchronousMachine
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:40 AM
//  Original author: tsaxton
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Wires;
using TC57CIM.IEC61970.Base.Domain;
namespace TC57CIM.IEC61970.Base.Wires {
	/// <summary>
	/// A rotating machine whose shaft rotates asynchronously with the electrical field.
	///  Also known as an induction machine with no external connection to the rotor
	/// windings, e.g. squirrel-cage induction machine.
	/// </summary>
	public class AsynchronousMachine : RotatingMachine {

		/// <summary>
		/// Indicates the type of Asynchronous Machine (motor or generator).
		/// </summary>
		public AsynchronousMachineKind asynchronousMachineType;
		/// <summary>
		/// Indicates whether the machine is a converter fed drive. Used for short circuit
		/// data exchange according to IEC 60909.
		/// </summary>
		public bool converterFedDrive;
		/// <summary>
		/// Efficiency of the asynchronous machine at nominal operation as a percentage.
		/// Indicator for converter drive motors. Used for short circuit data exchange
		/// according to IEC 60909.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PerCent efficiency;
		/// <summary>
		/// Ratio of locked-rotor current to the rated current of the motor (Ia/Ir). Used
		/// for short circuit data exchange according to IEC 60909.
		/// </summary>
		public float iaIrRatio;
		/// <summary>
		/// Nameplate data indicates if the machine is 50 Hz or 60 Hz.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Frequency nominalFrequency;
		/// <summary>
		/// Nameplate data.  Depends on the slip and number of pole pairs.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.RotationSpeed nominalSpeed;
		/// <summary>
		/// Number of pole pairs of stator. Used for short circuit data exchange according
		/// to IEC 60909.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer polePairNumber;
		/// <summary>
		/// Rated mechanical power (Pr in IEC 60909-0). Used for short circuit data
		/// exchange according to IEC 60909.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower ratedMechanicalPower;
		/// <summary>
		/// Indicates for converter drive motors if the power can be reversible. Used for
		/// short circuit data exchange according to IEC 60909.
		/// </summary>
		public bool reversible;
		/// <summary>
		/// Damper 1 winding resistance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Resistance rr1;
		/// <summary>
		/// Damper 2 winding resistance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Resistance rr2;
		/// <summary>
		/// Locked rotor ratio (R/X). Used for short circuit data exchange according to IEC
		/// 60909.
		/// </summary>
		public float rxLockedRotorRatio;
		/// <summary>
		/// Transient rotor time constant (greater than tppo).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tpo;
		/// <summary>
		/// Sub-transient rotor time constant (greater than 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tppo;
		/// <summary>
		/// Damper 1 winding leakage reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xlr1;
		/// <summary>
		/// Damper 2 winding leakage reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xlr2;
		/// <summary>
		/// Magnetizing reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xm;
		/// <summary>
		/// Transient reactance (unsaturated) (greater than or equal to xpp).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xp;
		/// <summary>
		/// Sub-transient reactance (unsaturated).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xpp;
		/// <summary>
		/// Synchronous reactance (greater than xp).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xs;

		public AsynchronousMachine(){

		}

		~AsynchronousMachine(){

		}

		public override void Dispose(){

		}

	}//end AsynchronousMachine

}//end namespace Wires
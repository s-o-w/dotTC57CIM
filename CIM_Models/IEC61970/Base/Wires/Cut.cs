///////////////////////////////////////////////////////////
//  Cut.cs
//  Implementation of the Class Cut
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:46 AM
//  Original author: selaost1
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Wires;
namespace TC57CIM.IEC61970.Base.Wires {
	/// <summary>
	/// A cut separates a line segment into two parts. The cut appears as a switch
	/// inserted between these two parts and connects them together. As the cut is
	/// normally open there is no galvanic connection between the two line segment
	/// parts. But it is possible to close the cut to get galvanic connection.
	/// The cut terminals are oriented towards the line segment terminals with the same
	/// sequence number. Hence the cut terminal with sequence number equal to 1 is
	/// oriented to the line segment's terminal with sequence number equal to 1.
	/// The cut terminals also act as connection points for jumpers and other equipment,
	/// e.g. a mobile generator. To enable this, connectivity nodes are placed at the
	/// cut terminals. Once the connectivity nodes are in place any conducting
	/// equipment can be connected at them.
	/// </summary>
	public class Cut : Switch {

		/// <summary>
		/// The length to the place where the cut is located starting from side one of the
		/// cut line segment, i.e. the line segment Terminal with sequenceNumber equal to 1.
		/// 
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Length lengthFromTerminal1;
		/// <summary>
		/// The line segment to which the cut is applied.
		/// </summary>
		public TC57CIM.IEC61970.Base.Wires.ACLineSegment ACLineSegment;

		public Cut(){

		}

		~Cut(){

		}

		public override void Dispose(){

		}

	}//end Cut

}//end namespace Wires
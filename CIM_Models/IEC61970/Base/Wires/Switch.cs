///////////////////////////////////////////////////////////
//  Switch.cs
//  Implementation of the Class Switch
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:24 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Wires;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.Wires {
	/// <summary>
	/// A generic device designed to close, or open, or both, one or more electric
	/// circuits.  All switches are two terminal devices including grounding switches.
	/// The ACDCTerminal.connected at the two sides of the switch shall not be
	/// considered for assessing switch connectivity, i.e. only Switch.open, .
	/// normalOpen and .locked are relevant.
	/// </summary>
	public class Switch : ConductingEquipment {

		/// <summary>
		/// If true, the switch is locked. The resulting switch state is a combination of
		/// locked and Switch.open attributes as follows:
		/// <ul>
		/// 	<li>locked=true and Switch.open=true. The resulting state is open and locked;
		/// </li>
		/// 	<li>locked=false and Switch.open=true. The resulting state is open;</li>
		/// 	<li>locked=false and Switch.open=false. The resulting state is closed.</li>
		/// </ul>
		/// </summary>
		public bool locked;
		/// <summary>
		/// The attribute is used in cases when no Measurement for the status value is
		/// present. If the Switch has a status measurement the Discrete.normalValue is
		/// expected to match with the Switch.normalOpen.
		/// </summary>
		public bool normalOpen;
		/// <summary>
		/// The attribute tells if the switch is considered open when used as input to
		/// topology processing.
		/// </summary>
		public bool open;
		/// <summary>
		/// The maximum continuous current carrying capacity in amps governed by the device
		/// material and construction.
		/// The attribute shall be a positive value.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.CurrentFlow ratedCurrent;
		/// <summary>
		/// Branch is retained in the topological solution.  The flow through retained
		/// switches will normally be calculated in power flow.
		/// </summary>
		public bool retained;
		/// <summary>
		/// The switch on count since the switch was last reset or initialized.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer switchOnCount;
		/// <summary>
		/// The date and time when the switch was last switched on.
		/// </summary>
		public System.DateTime switchOnDate;
		/// <summary>
		/// The individual switch phases for the switch.
		/// </summary>
		public TC57CIM.IEC61970.Base.Wires.SwitchPhase SwitchPhase;
		/// <summary>
		/// A Switch can be associated with SwitchSchedules.
		/// </summary>
		public TC57CIM.IEC61970.Base.Wires.SwitchSchedule SwitchSchedules;

		public Switch(){

		}

		~Switch(){

		}

		public override void Dispose(){

		}

	}//end Switch

}//end namespace Wires
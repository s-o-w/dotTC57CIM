///////////////////////////////////////////////////////////
//  ShuntCompensator.cs
//  Implementation of the Class ShuntCompensator
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:21 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Wires;
using TC57CIM.IEC61968.Operations;
namespace TC57CIM.IEC61970.Base.Wires {
	/// <summary>
	/// A shunt capacitor or reactor or switchable bank of shunt capacitors or reactors.
	/// A section of a shunt compensator is an individual capacitor or reactor. A
	/// negative value for bPerSection indicates that the compensator is a reactor.
	/// ShuntCompensator is a single terminal device.  Ground is implied.
	/// </summary>
	public class ShuntCompensator : RegulatingCondEq {

		/// <summary>
		/// An automatic voltage regulation delay (AVRDelay) which is the time delay from a
		/// change in voltage to when the capacitor is allowed to change state. This
		/// filters out temporary changes in voltage.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds aVRDelay;
		/// <summary>
		/// Used for Yn and Zn connections. True if the neutral is solidly grounded.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean grounded;
		/// <summary>
		/// The maximum number of sections that may be switched in.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer maximumSections;
		/// <summary>
		/// The voltage at which the nominal reactive power may be calculated. This should
		/// normally be within 10% of the voltage at which the capacitor is connected to
		/// the network.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Voltage nomU;
		/// <summary>
		/// The normal number of sections switched in. The value shall be between zero and
		/// ShuntCompensator.maximumSections.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer normalSections;
		/// <summary>
		/// The type of phase connection, such as wye or delta.
		/// </summary>
		public PhaseShuntConnectionKind phaseConnection;
		/// <summary>
		/// Shunt compensator sections in use. Starting value for steady state solution.
		/// The attribute shall be a positive value or zero. Non integer values are allowed
		/// to support continuous variables. The reasons for continuous value are to
		/// support study cases where no discrete shunt compensators has yet been designed,
		/// a solutions where a narrow voltage band force the sections to oscillate or
		/// accommodate for a continuous solution as input.
		/// For LinearShuntConpensator the value shall be between zero and ShuntCompensator.
		/// maximumSections. At value zero the shunt compensator conductance and admittance
		/// is zero. Linear interpolation of conductance and admittance between the
		/// previous and next integer section is applied in case of non-integer values.
		/// For NonlinearShuntCompensator-s shall only be set to one of the
		/// NonlinearShuntCompenstorPoint.sectionNumber. There is no interpolation between
		/// NonlinearShuntCompenstorPoint-s.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float sections;
		/// <summary>
		/// The switch on count since the capacitor count was last reset or initialized.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer switchOnCount;
		/// <summary>
		/// The date and time when the capacitor bank was last switched on.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.DateTime switchOnDate;
		/// <summary>
		/// Voltage sensitivity required for the device to regulate the bus voltage, in
		/// voltage/reactive power.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.VoltagePerReactivePower voltageSensitivity;
		/// <summary>
		/// The individual phases models for the shunt compensator.
		/// </summary>
		public TC57CIM.IEC61970.Base.Wires.ShuntCompensatorPhase ShuntCompensatorPhase;
		/// <summary>
		/// The shunt compensator action that is performed on the shunt compensator
		/// </summary>
		public TC57CIM.IEC61968.Operations.ShuntCompensatorAction ShuntCompensatorAction;

		public ShuntCompensator(){

		}

		~ShuntCompensator(){

		}

		public override void Dispose(){

		}

	}//end ShuntCompensator

}//end namespace Wires
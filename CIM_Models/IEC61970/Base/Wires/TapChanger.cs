///////////////////////////////////////////////////////////
//  TapChanger.cs
//  Implementation of the Class TapChanger
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:25 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Wires;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.Wires {
	/// <summary>
	/// Mechanism for changing transformer winding tap positions.
	/// </summary>
	public class TapChanger : PowerSystemResource {

		/// <summary>
		/// Specifies the regulation status of the equipment.  True is regulating, false is
		/// not regulating.
		/// </summary>
		public bool controlEnabled;
		/// <summary>
		/// Highest possible tap step position, advance from neutral.
		/// The attribute shall be greater than lowStep.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer highStep;
		/// <summary>
		/// For an LTC, the delay for initial tap changer operation (first step change).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds initialDelay;
		/// <summary>
		/// Lowest possible tap step position, retard from neutral.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer lowStep;
		/// <summary>
		/// Specifies whether or not a TapChanger has load tap changing capabilities.
		/// </summary>
		public bool ltcFlag;
		/// <summary>
		/// The neutral tap step position for this winding.
		/// The attribute shall be equal to or greater than lowStep and equal or less than
		/// highStep.
		/// It is the step position where the voltage is neutralU when the other terminals
		/// of the transformer are at the ratedU.  If there are other tap changers on the
		/// transformer those taps are kept constant at their neutralStep.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer neutralStep;
		/// <summary>
		/// Voltage at which the winding operates at the neutral tap setting. It is the
		/// voltage at the terminal of the PowerTransformerEnd associated with the tap
		/// changer when all tap changers on the transformer are at their neutralStep
		/// position.  Normally neutralU of the tap changer is the same as ratedU of the
		/// PowerTransformerEnd, but it can differ in special cases such as when the
		/// tapping mechanism is separate from the winding more common on lower voltage
		/// transformers.
		/// This attribute is not relevant for PhaseTapChangerAsymmetrical,
		/// PhaseTapChangerSymmetrical and PhaseTapChangerLinear.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Voltage neutralU;
		/// <summary>
		/// The tap step position used in "normal" network operation for this winding. For
		/// a "Fixed" tap changer indicates the current physical tap setting.
		/// The attribute shall be equal to or greater than lowStep and equal to or less
		/// than highStep.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer normalStep;
		/// <summary>
		/// Tap changer position.
		/// Starting step for a steady state solution. Non integer values are allowed to
		/// support continuous tap variables. The reasons for continuous value are to
		/// support study cases where no discrete tap changer has yet been designed, a
		/// solution where a narrow voltage band forces the tap step to oscillate or to
		/// accommodate for a continuous solution as input.
		/// The attribute shall be equal to or greater than lowStep and equal to or less
		/// than highStep.
		/// </summary>
		public float step;
		/// <summary>
		/// For an LTC, the delay for subsequent tap changer operation (second and later
		/// step changes).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds subsequentDelay;
		/// <summary>
		/// The regulating control scheme in which this tap changer participates.
		/// </summary>
		public TC57CIM.IEC61970.Base.Wires.TapChangerControl TapChangerControl;

		public TapChanger(){

		}

		~TapChanger(){

		}

		public override void Dispose(){

		}

	}//end TapChanger

}//end namespace Wires
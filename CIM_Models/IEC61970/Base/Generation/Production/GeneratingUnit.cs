///////////////////////////////////////////////////////////
//  GeneratingUnit.cs
//  Implementation of the Class GeneratingUnit
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:57 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Generation.Production;
using TC57CIM.IEC61970.Base.Wires;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.Generation.Production {
	/// <summary>
	/// A single or set of synchronous machines for converting mechanical power into
	/// alternating-current power. For example, individual machines within a set may be
	/// defined for scheduling purposes while a single control signal is derived for
	/// the set. In this case there would be a GeneratingUnit for each member of the
	/// set and an additional GeneratingUnit corresponding to the set.
	/// </summary>
	public class GeneratingUnit : Equipment {

		/// <summary>
		/// The planned unused capacity (spinning reserve) which can be used to support
		/// emergency load.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower allocSpinResP;
		/// <summary>
		/// The planned unused capacity which can be used to support automatic control
		/// overruns.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower autoCntrlMarginP;
		/// <summary>
		/// For dispatchable units, this value represents the economic active power
		/// basepoint, for units that are not dispatchable, this value represents the fixed
		/// generation value. The value shall be between the operating low and high limits.
		/// 
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower baseP;
		/// <summary>
		/// Unit control error deadband. When a unit's desired active power change is less
		/// than this deadband, then no control pulses will be sent to the unit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower controlDeadband;
		/// <summary>
		/// Pulse high limit which is the largest control pulse that the unit can respond
		/// to.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds controlPulseHigh;
		/// <summary>
		/// Pulse low limit which is the smallest control pulse that the unit can respond
		/// to.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds controlPulseLow;
		/// <summary>
		/// Unit response rate which specifies the active power change for a control pulse
		/// of one second in the most responsive loading level of the unit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePowerChangeRate controlResponseRate;
		/// <summary>
		/// The efficiency of the unit in converting mechanical energy, from the prime
		/// mover, into electrical energy.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PerCent efficiency;
		/// <summary>
		/// The unit control mode.
		/// </summary>
		public GeneratorControlMode genControlMode;
		/// <summary>
		/// The source of controls for a generating unit.  Defines the control status of
		/// the generating unit.
		/// </summary>
		public GeneratorControlSource genControlSource;
		/// <summary>
		/// Governor motor position limit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU governorMPL;
		/// <summary>
		/// Governor Speed Changer Droop.   This is the change in generator power output
		/// divided by the change in frequency normalized by the nominal power of the
		/// generator and the nominal frequency and expressed in percent and negated. A
		/// positive value of speed change droop provides additional generator output upon
		/// a drop in frequency.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PerCent governorSCD;
		/// <summary>
		/// High limit for secondary (AGC) control.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower highControlLimit;
		/// <summary>
		/// Default initial active power  which is used to store a powerflow result for the
		/// initial active power for this unit in this network configuration.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower initialP;
		/// <summary>
		/// Generating unit long term economic participation factor.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float longPF;
		/// <summary>
		/// Low limit for secondary (AGC) control.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower lowControlLimit;
		/// <summary>
		/// The normal maximum rate the generating unit active power output can be lowered
		/// by control actions.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePowerChangeRate lowerRampRate;
		/// <summary>
		/// Maximum high economic active power limit, that should not exceed the maximum
		/// operating active power limit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower maxEconomicP;
		/// <summary>
		/// Maximum allowable spinning reserve. Spinning reserve will never be considered
		/// greater than this value regardless of the current operating point.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower maximumAllowableSpinningReserve;
		/// <summary>
		/// This is the maximum operating active power limit the dispatcher can enter for
		/// this unit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower maxOperatingP;
		/// <summary>
		/// Low economic active power limit that shall be greater than or equal to the
		/// minimum operating active power limit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower minEconomicP;
		/// <summary>
		/// Minimum time interval between unit shutdown and startup.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds minimumOffTime;
		/// <summary>
		/// This is the minimum operating active power limit the dispatcher can enter for
		/// this unit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower minOperatingP;
		/// <summary>
		/// Detail level of the generator model data.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Classification modelDetail;
		/// <summary>
		/// The nominal power of the generating unit.  Used to give precise meaning to
		/// percentage based attributes such as the governor speed change droop
		/// (governorSCD attribute).
		/// The attribute shall be a positive value equal to or less than RotatingMachine.
		/// ratedS.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower nominalP;
		/// <summary>
		/// Generating unit economic participation factor.  The sum of the participation
		/// factors across generating units does not have to sum to one.  It is used for
		/// representing distributed slack participation factor. The attribute shall be a
		/// positive value or zero.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float normalPF;
		/// <summary>
		/// Defined as: 1 / ( 1 - Incremental Transmission Loss); with the Incremental
		/// Transmission Loss expressed as a plus or minus value. The typical range of
		/// penalty factors is (0.9 to 1.1).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float penaltyFactor;
		/// <summary>
		/// The normal maximum rate the generating unit active power output can be raised
		/// by control actions.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePowerChangeRate raiseRampRate;
		/// <summary>
		/// The unit's gross rated maximum capacity (book value).
		/// The attribute shall be a positive value.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower ratedGrossMaxP;
		/// <summary>
		/// The gross rated minimum generation level which the unit can safely operate at
		/// while delivering power to the transmission grid.
		/// The attribute shall be a positive value.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower ratedGrossMinP;
		/// <summary>
		/// The net rated maximum capacity determined by subtracting the auxiliary power
		/// used to operate the internal plant machinery from the rated gross maximum
		/// capacity.
		/// The attribute shall be a positive value.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower ratedNetMaxP;
		/// <summary>
		/// Generating unit short term economic participation factor.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float shortPF;
		/// <summary>
		/// The initial startup cost incurred for each start of the GeneratingUnit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money startupCost;
		/// <summary>
		/// Time it takes to get the unit on-line, from the time that the prime mover
		/// mechanical power is applied.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds startupTime;
		/// <summary>
		/// Generating unit economic participation factor.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float tieLinePF;
		/// <summary>
		/// The efficiency of the unit in converting the fuel into electrical energy.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PerCent totalEfficiency;
		/// <summary>
		/// The variable cost component of production per unit of ActivePower.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money variableCost;
		/// <summary>
		/// A generating unit may have an operating schedule, indicating the planned
		/// operation of the unit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Generation.Production.GenUnitOpSchedule GenUnitOpSchedule;
		/// <summary>
		/// A generating unit may have a gross active power to net active power curve,
		/// describing the losses and auxiliary power requirements of the unit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Generation.Production.GrossToNetActivePowerCurve GrossToNetActivePowerCurves;
		/// <summary>
		/// A generating unit may have one or more cost curves, depending upon fuel mixture
		/// and fuel cost.
		/// </summary>
		public TC57CIM.IEC61970.Base.Generation.Production.GenUnitOpCostCurve GenUnitOpCostCurves;
		/// <summary>
		/// A synchronous machine may operate as a generator and as such becomes a member
		/// of a generating unit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Wires.RotatingMachine RotatingMachine;

		public GeneratingUnit(){

		}

		~GeneratingUnit(){

		}

		public override void Dispose(){

		}

	}//end GeneratingUnit

}//end namespace Production
///////////////////////////////////////////////////////////
//  HeatInputCurve.cs
//  Implementation of the Class HeatInputCurve
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:00 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.Generation.Production {
	/// <summary>
	/// Relationship between unit heat input in energy per time for main fuel (Y1-axis)
	/// and supplemental fuel (Y2-axis) versus unit output in active power (X-axis).
	/// The quantity of main fuel used to sustain generation at this output level is
	/// prorated for throttling between definition points. The quantity of supplemental
	/// fuel used at this output level is fixed and not prorated.
	/// </summary>
	public class HeatInputCurve : Curve {

		/// <summary>
		/// Power output - auxiliary power multiplier adjustment factor.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU auxPowerMult;
		/// <summary>
		/// Power output - auxiliary power offset adjustment factor.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower auxPowerOffset;
		/// <summary>
		/// Heat input - efficiency multiplier adjustment factor.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU heatInputEff;
		/// <summary>
		/// Heat input - offset adjustment factor.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.HeatRate heatInputOffset;
		/// <summary>
		/// Flag is set to true when output is expressed in net active power.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean isNetGrossP;

		public HeatInputCurve(){

		}

		~HeatInputCurve(){

		}

		public override void Dispose(){

		}

	}//end HeatInputCurve

}//end namespace Production
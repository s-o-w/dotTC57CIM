///////////////////////////////////////////////////////////
//  FossilSteamSupply.cs
//  Implementation of the Class FossilSteamSupply
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:56 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Generation.GenerationTrainingSimulation;
namespace TC57CIM.IEC61970.Base.Generation.GenerationTrainingSimulation {
	/// <summary>
	/// Fossil fuelled boiler (e.g., coal, oil, gas).
	/// </summary>
	public class FossilSteamSupply : SteamSupply {

		/// <summary>
		/// Off nominal frequency effect on auxiliary real power. Per unit active power
		/// variation versus per unit frequency variation.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU auxPowerVersusFrequency;
		/// <summary>
		/// Off nominal voltage effect on auxiliary real power. Per unit active power
		/// variation versus per unit voltage variation.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU auxPowerVersusVoltage;
		/// <summary>
		/// The control mode of the boiler.
		/// </summary>
		public BoilerControlMode boilerControlMode;
		/// <summary>
		/// Active power error bias ratio.
		/// </summary>
		public float controlErrorBiasP;
		/// <summary>
		/// Integral constant.
		/// </summary>
		public float controlIC;
		/// <summary>
		/// Proportional constant.
		/// </summary>
		public float controlPC;
		/// <summary>
		/// Pressure error bias ratio.
		/// </summary>
		public float controlPEB;
		/// <summary>
		/// Pressure error deadband.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU controlPED;
		/// <summary>
		/// Time constant.
		/// </summary>
		public float controlTC;
		/// <summary>
		/// Feedwater integral gain ratio.
		/// </summary>
		public float feedWaterIG;
		/// <summary>
		/// Feedwater proportional gain ratio.
		/// </summary>
		public float feedWaterPG;
		/// <summary>
		/// Feedwater time constant ratio.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds feedWaterTC;
		/// <summary>
		/// Fuel demand limit.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU fuelDemandLimit;
		/// <summary>
		/// Fuel delay.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds fuelSupplyDelay;
		/// <summary>
		/// Fuel supply time constant.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds fuelSupplyTC;
		/// <summary>
		/// Active power maximum error rate limit.
		/// </summary>
		public float maxErrorRateP;
		/// <summary>
		/// Mechanical power sensor lag.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds mechPowerSensorLag;
		/// <summary>
		/// Active power minimum error rate limit.
		/// </summary>
		public float minErrorRateP;
		/// <summary>
		/// Pressure control derivative gain ratio.
		/// </summary>
		public float pressureCtrlDG;
		/// <summary>
		/// Pressure control integral gain ratio.
		/// </summary>
		public float pressureCtrlIG;
		/// <summary>
		/// Pressure control proportional gain ratio.
		/// </summary>
		public float pressureCtrlPG;
		/// <summary>
		/// Pressure feedback indicator.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer pressureFeedback;
		/// <summary>
		/// Drum/primary superheater capacity.
		/// </summary>
		public float superHeater1Capacity;
		/// <summary>
		/// Secondary superheater capacity.
		/// </summary>
		public float superHeater2Capacity;
		/// <summary>
		/// Superheater pipe pressure drop constant.
		/// </summary>
		public float superHeaterPipePD;
		/// <summary>
		/// Throttle pressure setpoint.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU throttlePressureSP;

		public FossilSteamSupply(){

		}

		~FossilSteamSupply(){

		}

		public override void Dispose(){

		}

	}//end FossilSteamSupply

}//end namespace GenerationTrainingSimulation
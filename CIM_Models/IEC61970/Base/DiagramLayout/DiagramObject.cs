///////////////////////////////////////////////////////////
//  DiagramObject.cs
//  Implementation of the Class DiagramObject
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:48 AM
//  Original author: mcmorran
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.DiagramLayout;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.DiagramLayout {
	/// <summary>
	/// An object that defines one or more points in a given space. This object can be
	/// associated with anything that specializes IdentifiedObject. For single line
	/// diagrams such objects typically include such items as analog values, breakers,
	/// disconnectors, power transformers, and transmission lines.
	/// </summary>
	public class DiagramObject : IdentifiedObject {

		/// <summary>
		/// The drawing order of this element. The higher the number, the later the element
		/// is drawn in sequence. This is used to ensure that elements that overlap are
		/// rendered in the correct order.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer drawingOrder;
		/// <summary>
		/// Defines whether or not the diagram objects points define the boundaries of a
		/// polygon or the routing of a polyline. If this value is true then a receiving
		/// application should consider the first and last points to be connected.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean isPolygon;
		/// <summary>
		/// The offset in the X direction. This is used for defining the offset from centre
		/// for rendering an icon (the default is that a single point specifies the centre
		/// of the icon).
		/// 
		/// The offset is in per-unit with 0 indicating there is no offset from the
		/// horizontal centre of the icon.  -0.5 indicates it is offset by 50% to the left
		/// and 0.5 indicates an offset of 50% to the right.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float offsetX;
		/// <summary>
		/// The offset in the Y direction. This is used for defining the offset from centre
		/// for rendering an icon (the default is that a single point specifies the centre
		/// of the icon).
		/// 
		/// The offset is in per-unit with 0 indicating there is no offset from the
		/// vertical centre of the icon.  The offset direction is dependent on the
		/// orientation of the diagram, with -0.5 and 0.5 indicating an offset of +/- 50%
		/// on the vertical axis.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float offsetY;
		/// <summary>
		/// Sets the angle of rotation of the diagram object.  Zero degrees is pointing to
		/// the top of the diagram.  Rotation is clockwise.  DiagramObject.rotation=0 has
		/// the following meaning: The connection point of an element which has one
		/// terminal is pointing to the top side of the diagram. The connection point "From
		/// side" of an element which has more than one terminal is pointing to the top
		/// side of the diagram.
		/// DiagramObject.rotation=90 has the following meaning: The connection point of an
		/// element which has one terminal is pointing to the right hand side of the
		/// diagram. The connection point "From side" of an element which has more than one
		/// terminal is pointing to the right hand side of the diagram.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.AngleDegrees rotation;
		/// <summary>
		/// A diagram object is part of a diagram.
		/// </summary>
		public TC57CIM.IEC61970.Base.DiagramLayout.Diagram Diagram;
		/// <summary>
		/// A diagram object can be part of multiple visibility layers.
		/// </summary>
		public TC57CIM.IEC61970.Base.DiagramLayout.VisibilityLayer VisibilityLayers;
		/// <summary>
		/// A diagram object can have 0 or more points to reflect its layout position,
		/// routing (for polylines) or boundary (for polygons).
		/// </summary>
		public TC57CIM.IEC61970.Base.DiagramLayout.DiagramObjectPoint DiagramObjectPoints;
		/// <summary>
		/// A diagram object has a style associated that provides a reference for the style
		/// used in the originating system.
		/// </summary>
		public TC57CIM.IEC61970.Base.DiagramLayout.DiagramObjectStyle DiagramObjectStyle;

		public DiagramObject(){

		}

		~DiagramObject(){

		}

		public override void Dispose(){

		}

	}//end DiagramObject

}//end namespace DiagramLayout
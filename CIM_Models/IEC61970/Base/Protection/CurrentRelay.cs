///////////////////////////////////////////////////////////
//  CurrentRelay.cs
//  Implementation of the Class CurrentRelay
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:45 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Protection;
namespace TC57CIM.IEC61970.Base.Protection {
	/// <summary>
	/// A device that checks current flow values in any direction or designated
	/// direction.
	/// </summary>
	public class CurrentRelay : ProtectionEquipment {

		/// <summary>
		/// Current limit number one 1 for inverse time pickup.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.CurrentFlow currentLimit1;
		/// <summary>
		/// Current limit number 2 for inverse time pickup.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.CurrentFlow currentLimit2;
		/// <summary>
		/// Current limit number 3 for inverse time pickup.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.CurrentFlow currentLimit3;
		/// <summary>
		/// Set true if the current relay has inverse time characteristic.
		/// </summary>
		public bool inverseTimeFlag;
		/// <summary>
		/// Inverse time delay number 1 for current limit number 1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds timeDelay1;
		/// <summary>
		/// Inverse time delay number 2 for current limit number 2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds timeDelay2;
		/// <summary>
		/// Inverse time delay number 3 for current limit number 3.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds timeDelay3;

		public CurrentRelay(){

		}

		~CurrentRelay(){

		}

		public override void Dispose(){

		}

	}//end CurrentRelay

}//end namespace Protection
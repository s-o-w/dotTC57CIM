///////////////////////////////////////////////////////////
//  OperationalLimitType.cs
//  Implementation of the Class OperationalLimitType
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:11 AM
//  Original author: kdd
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.OperationalLimits;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.OperationalLimits {
	/// <summary>
	/// The operational meaning of a category of limits.
	/// </summary>
	public class OperationalLimitType : IdentifiedObject {

		/// <summary>
		/// The nominal acceptable duration of the limit. Limits are commonly expressed in
		/// terms of the time limit for which the limit is normally acceptable. The actual
		/// acceptable duration of a specific limit may depend on other local factors such
		/// as temperature or wind speed. The attribute has meaning only if the flag
		/// isInfiniteDuration is set to false, hence it shall not be exchanged when
		/// isInfiniteDuration is set to true.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds acceptableDuration;
		/// <summary>
		/// The direction of the limit.
		/// </summary>
		public OperationalLimitDirectionKind direction;
		/// <summary>
		/// Defines if the operational limit type has infinite duration. If true, the limit
		/// has infinite duration. If false, the limit has definite duration which is
		/// defined by the attribute acceptableDuration.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean isInfiniteDuration;

		public OperationalLimitType(){

		}

		~OperationalLimitType(){

		}

		public override void Dispose(){

		}

	}//end OperationalLimitType

}//end namespace OperationalLimits
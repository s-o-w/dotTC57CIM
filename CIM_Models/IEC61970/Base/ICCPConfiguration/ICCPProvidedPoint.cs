///////////////////////////////////////////////////////////
//  ICCPProvidedPoint.cs
//  Implementation of the Class ICCPProvidedPoint
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:01 AM
//  Original author: SELAOST1
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.ICCPConfiguration;
namespace TC57CIM.IEC61970.Base.ICCPConfiguration {
	/// <summary>
	/// The IdentifiedObject.name attribute must have a value.  The name attribute
	/// shall be used as the DataValue name used for the exchange.
	/// </summary>
	public class ICCPProvidedPoint : ProvidedBilateralPoint {

		/// <summary>
		/// Provides information regarding the access privileges allowed to the ICCP Point.
		/// 
		/// </summary>
		public ICCPAccessPrivilegeKind accessPriviledge;
		/// <summary>
		/// Specifies the type of ICCP quality that will be conveyed as part of the ICCP
		/// Point.
		/// </summary>
		public ICCPQualityKind pointQuality;
		/// <summary>
		/// Indicates the ICCP Point type that is to be conveyed.
		/// 
		/// A CIM AccumlatorValue  shall be mapped to an ICCP real.
		/// A CIM AnalogValue shall be mapped to an ICCP real.
		/// A CIM DiscreteValue shall be mapped to either an ICCP real, state,
		/// stateSupplemental, or either protection event type.
		/// A CIM StringMeasurementValue does not have a standardized mapping.
		/// </summary>
		public ICCPPointKind pointType;
		/// <summary>
		/// Indicates if the Point is global scoped (e.g. VCC) or accessible only to the
		/// Bilateral table peer (e.g. ICC).
		/// </summary>
		public ICCPScopeKind scope;

		public ICCPProvidedPoint(){

		}

		~ICCPProvidedPoint(){

		}

		public override void Dispose(){

		}

	}//end ICCPProvidedPoint

}//end namespace ICCPConfiguration
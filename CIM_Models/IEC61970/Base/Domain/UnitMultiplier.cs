///////////////////////////////////////////////////////////
//  UnitMultiplier.cs
//  Implementation of the Class UnitMultiplier
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:28 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



namespace TC57CIM.IEC61970.Base.Domain {
	/// <summary>
	/// The unit multipliers defined for the CIM.  When applied to unit symbols, the
	/// unit symbol is treated as a derived unit. Regardless of the contents of the
	/// unit symbol text, the unit symbol shall be treated as if it were a single-
	/// character unit symbol. Unit symbols should not contain multipliers, and it
	/// should be left to the multiplier to define the multiple for an entire data type.
	/// 
	/// 
	/// For example, if a unit symbol is "m2Pers" and the multiplier is "k", then the
	/// value is k(m**2/s), and the multiplier applies to the entire final value, not
	/// to any individual part of the value. This can be conceptualized by substituting
	/// a derived unit symbol for the unit type. If one imagines that the symbol "ﬁ"
	/// represents the derived unit "m2Pers", then applying the multiplier "k" can be
	/// conceptualized simply as "kﬁ".
	/// 
	/// For example, the SI unit for mass is "kg" and not "g".  If the unit symbol is
	/// defined as "kg", then the multiplier is applied to "kg" as a whole and does not
	/// replace the "k" in front of the "g". In this case, the multiplier of "m" would
	/// be used with the unit symbol of "kg" to represent one gram.  As a text string,
	/// this violates the instructions in IEC 80000-1. However, because the unit symbol
	/// in CIM is treated as a derived unit instead of as an SI unit, it makes more
	/// sense to conceptualize the "kg" as if it were replaced by one of the proposed
	/// replacements for the SI mass symbol. If one imagines that the "kg" were
	/// replaced by a symbol "ﬁ", then it is easier to conceptualize the multiplier "m"
	/// as creating the proper unit "mﬁ", and not the forbidden unit "mkg".
	/// </summary>
	public enum UnitMultiplier : int {

		/// <summary>
		/// Yocto 10**-24.
		/// </summary>
		y = -24,
		/// <summary>
		/// Zepto 10**-21.
		/// </summary>
		z = -21,
		/// <summary>
		/// Atto 10**-18.
		/// </summary>
		a = -18,
		/// <summary>
		/// Femto 10**-15.
		/// </summary>
		f = -15,
		/// <summary>
		/// Pico 10**-12.
		/// </summary>
		p = -12,
		/// <summary>
		/// Nano 10**-9.
		/// </summary>
		n = -9,
		/// <summary>
		/// Micro 10**-6.
		/// </summary>
		micro = -6,
		/// <summary>
		/// Milli 10**-3.
		/// </summary>
		m = -3,
		/// <summary>
		/// Centi 10**-2.
		/// </summary>
		c = -2,
		/// <summary>
		/// Deci 10**-1.
		/// </summary>
		d = -1,
		/// <summary>
		/// No multiplier or equivalently multiply by 1.
		/// </summary>
		none = 0,
		/// <summary>
		/// Deca 10**1.
		/// </summary>
		da = 1,
		/// <summary>
		/// Hecto 10**2.
		/// </summary>
		h = 2,
		/// <summary>
		/// Kilo 10**3.
		/// </summary>
		k = 3,
		/// <summary>
		/// Mega 10**6.
		/// </summary>
		M = 6,
		/// <summary>
		/// Giga 10**9.
		/// </summary>
		G = 9,
		/// <summary>
		/// Tera 10**12.
		/// </summary>
		T = 12,
		/// <summary>
		/// Peta 10**15.
		/// </summary>
		P = 15,
		/// <summary>
		/// Exa 10**18.
		/// </summary>
		E = 18,
		/// <summary>
		/// Zetta 10**21.
		/// </summary>
		Z = 21,
		/// <summary>
		/// Yotta 10**24.
		/// </summary>
		Y = 24

	}//end UnitMultiplier

}//end namespace Domain
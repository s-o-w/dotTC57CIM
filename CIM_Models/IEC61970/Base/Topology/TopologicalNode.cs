///////////////////////////////////////////////////////////
//  TopologicalNode.cs
//  Implementation of the Class TopologicalNode
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:26 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.Topology {
	/// <summary>
	/// For a detailed substation model a topological node is a set of connectivity
	/// nodes that, in the current network state, are connected together through any
	/// type of closed switches, including  jumpers. Topological nodes change as the
	/// current network state changes (i.e., switches, breakers, etc. change state).
	/// For a planning model, switch statuses are not used to form topological nodes.
	/// Instead they are manually created or deleted in a model builder tool.
	/// Topological nodes maintained this way are also called "busses".
	/// </summary>
	public class TopologicalNode : IdentifiedObject {

		/// <summary>
		/// The active power injected into the bus at this location in addition to
		/// injections from equipment.  Positive sign means injection into the
		/// TopologicalNode (bus).
		/// Starting value for a steady state solution.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ActivePower pInjection;
		/// <summary>
		/// The reactive power injected into the bus at this location in addition to
		/// injections from equipment. Positive sign means injection into the
		/// TopologicalNode (bus).
		/// Starting value for a steady state solution.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.ReactivePower qInjection;
		/// <summary>
		/// The reporting group to which the topological node belongs.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.ReportingGroup ReportingGroup;
		/// <summary>
		/// The connectivity node container to which the topological node belongs.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.ConnectivityNodeContainer ConnectivityNodeContainer;
		/// <summary>
		/// The connectivity nodes combine together to form this topological node.  May
		/// depend on the current state of switches in the network.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.ConnectivityNode ConnectivityNodes;
		/// <summary>
		/// The base voltage of the topological node.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.BaseVoltage BaseVoltage;
		/// <summary>
		/// The terminals associated with the topological node.   This can be used as an
		/// alternative to the connectivity node path to terminal, thus making it
		/// unnecessary to model connectivity nodes in some cases.   Note that if
		/// connectivity nodes are in the model, this association would probably not be
		/// used as an input specification.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.Terminal Terminal;

		public TopologicalNode(){

		}

		~TopologicalNode(){

		}

		public override void Dispose(){

		}

	}//end TopologicalNode

}//end namespace Topology
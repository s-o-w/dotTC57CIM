///////////////////////////////////////////////////////////
//  StageTrigger.cs
//  Implementation of the Class StageTrigger
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:21 AM
//  Original author: sveinols
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Core;
using TC57CIM.IEC61970.InfIEC61970.InfSIPS;
namespace TC57CIM.IEC61970.InfIEC61970.InfSIPS {
	/// <summary>
	/// Condition that is triggered either by TriggerCondition of by gate condition
	/// within a stage and has remedial action-s.
	/// </summary>
	public class StageTrigger : IdentifiedObject {

		/// <summary>
		/// The status of the class set by operation or by signal. Optional field that will
		/// override other status fields.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean armed;
		/// <summary>
		/// The default/normal value used when other active signal/values are missing.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean normalArmed;
		/// <summary>
		/// Priority of trigger. 0 = don t care (default) 1 = highest priority. 2 is less
		/// than 1 and so on. A trigger with the highest priority will trigger first.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer priority;
		/// <summary>
		/// Association to a Gate that through a gate logic and input pin defines arming of
		/// the StageTrigger.
		/// </summary>
		public TC57CIM.IEC61970.InfIEC61970.InfSIPS.Gate GateArmed;
		/// <summary>
		/// For the StageTrigger to active the set of protective actions the condition for
		/// communication needs to be met (true).
		/// </summary>
		public TC57CIM.IEC61970.InfIEC61970.InfSIPS.Gate GateComCondition;
		/// <summary>
		/// The Gate result that trigger the StageTrigger and thereby executing the a set
		/// of protective actions.
		/// </summary>
		public TC57CIM.IEC61970.InfIEC61970.InfSIPS.Gate GateTrigger;

		public StageTrigger(){

		}

		~StageTrigger(){

		}

		public override void Dispose(){

		}

	}//end StageTrigger

}//end namespace InfSIPS
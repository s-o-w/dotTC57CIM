///////////////////////////////////////////////////////////
//  ExcOEX3T.cs
//  Implementation of the Class ExcOEX3T
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:55 AM
//  Original author: pcha006
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Dynamics.StandardModels.ExcitationSystemDynamics;
namespace TC57CIM.IEC61970.Dynamics.StandardModels.ExcitationSystemDynamics {
	/// <summary>
	/// Modified IEEE type ST1 excitation system with semi-continuous and acting
	/// terminal voltage limiter.
	/// </summary>
	public class ExcOEX3T : ExcitationSystemDynamics {

		/// <summary>
		/// Saturation parameter (<i>E</i><i><sub>1</sub></i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU e1;
		/// <summary>
		/// Saturation parameter (<i>E</i><i><sub>2</sub></i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU e2;
		/// <summary>
		/// Gain (<i>K</i><i><sub>A</sub></i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU ka;
		/// <summary>
		/// Gain (<i>K</i><i><sub>C</sub></i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kc;
		/// <summary>
		/// Gain (<i>K</i><i><sub>D</sub></i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kd;
		/// <summary>
		/// Gain (<i>K</i><i><sub>E</sub></i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU ke;
		/// <summary>
		/// Gain (<i>K</i><i><sub>F</sub></i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kf;
		/// <summary>
		/// Saturation parameter
		/// (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>1</sub></i><i>]</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU see1;
		/// <summary>
		/// Saturation parameter
		/// (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>2</sub></i><i>]</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU see2;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>1</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t1;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>2</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t2;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>3</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t3;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>4</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t4;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>5</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t5;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>6</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t6;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>E</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds te;
		/// <summary>
		/// Time constant (<i>T</i><i><sub>F</sub></i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tf;
		/// <summary>
		/// Limiter (<i>V</i><i><sub>RMAX</sub></i>) (> ExcOEX3T.vrmin).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vrmax;
		/// <summary>
		/// Limiter (<i>V</i><i><sub>RMIN</sub></i>) (< ExcOEX3T.vrmax).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vrmin;

		public ExcOEX3T(){

		}

		~ExcOEX3T(){

		}

		public override void Dispose(){

		}

	}//end ExcOEX3T

}//end namespace ExcitationSystemDynamics
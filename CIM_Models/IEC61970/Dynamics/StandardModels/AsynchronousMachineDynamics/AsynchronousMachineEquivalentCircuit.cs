///////////////////////////////////////////////////////////
//  AsynchronousMachineEquivalentCircuit.cs
//  Implementation of the Class AsynchronousMachineEquivalentCircuit
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:40 AM
//  Original author: ppbr003
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Dynamics.StandardModels.AsynchronousMachineDynamics;
namespace TC57CIM.IEC61970.Dynamics.StandardModels.AsynchronousMachineDynamics {
	/// <summary>
	/// The electrical equations of all variations of the asynchronous model are based
	/// on the AsynchronousEquivalentCircuit diagram for the direct- and quadrature-
	/// axes, with two equivalent rotor windings in each axis.
	/// Equations for conversion between equivalent circuit and time constant reactance
	/// forms:
	/// <i>Xs</i> = <i>Xm</i> + <i>Xl</i>
	/// <i>X'</i> = <i>Xl</i> + <i>Xm</i> x <i>Xlr1 </i>/ (<i>Xm </i>+ <i>Xlr1</i>)
	/// <i>X''</i> = <i>Xl</i> + <i>Xm</i> x <i>Xlr1</i> x <i>Xlr2</i> / (<i>Xm</i> x
	/// <i>Xlr1</i> + <i>Xm</i> x <i>Xlr2</i> + <i>Xlr1</i> x <i>Xlr2</i>)
	/// <i>T'o</i> = (<i>Xm</i> + <i>Xlr1</i>) / (<i>omega</i><i><sub>0</sub></i> x
	/// <i>Rr1</i>)
	/// <i>T''o</i> = (<i>Xm</i> x <i>Xlr1</i> + <i>Xm</i> x <i>Xlr2</i> + <i>Xlr1</i>
	/// x <i>Xlr2</i>) / (<i>omega</i><i><sub>0</sub></i> x <i>Rr2</i> x (<i>Xm</i> +
	/// <i>Xlr1</i>)
	/// Same equations using CIM attributes from
	/// AsynchronousMachineTimeConstantReactance class on left of "=" and
	/// AsynchronousMachineEquivalentCircuit class on right (except as noted):
	/// xs = xm + RotatingMachineDynamics.statorLeakageReactance
	/// xp = RotatingMachineDynamics.statorLeakageReactance + xm x xlr1 / (xm + xlr1)
	/// xpp = RotatingMachineDynamics.statorLeakageReactance + xm x xlr1 x xlr2 / (xm x
	/// xlr1 + xm x xlr2 + xlr1 x xlr2)
	/// tpo = (xm + xlr1) / (2 x pi x nominal frequency x rr1)
	/// tppo = (xm x xlr1 + xm x xlr2 + xlr1 x xlr2) / (2 x pi x nominal frequency x
	/// rr2 x (xm + xlr1).
	/// </summary>
	public class AsynchronousMachineEquivalentCircuit : AsynchronousMachineDynamics {

		/// <summary>
		/// Damper 1 winding resistance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU rr1;
		/// <summary>
		/// Damper 2 winding resistance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU rr2;
		/// <summary>
		/// Damper 1 winding leakage reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU xlr1;
		/// <summary>
		/// Damper 2 winding leakage reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU xlr2;
		/// <summary>
		/// Magnetizing reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU xm;

		public AsynchronousMachineEquivalentCircuit(){

		}

		~AsynchronousMachineEquivalentCircuit(){

		}

		public override void Dispose(){

		}

	}//end AsynchronousMachineEquivalentCircuit

}//end namespace AsynchronousMachineDynamics
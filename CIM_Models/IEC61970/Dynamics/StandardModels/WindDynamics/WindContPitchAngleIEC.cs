///////////////////////////////////////////////////////////
//  WindContPitchAngleIEC.cs
//  Implementation of the Class WindContPitchAngleIEC
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:30 AM
//  Original author: ppbr003
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Core;
using TC57CIM.IEC61970.Dynamics.StandardModels.WindDynamics;
namespace TC57CIM.IEC61970.Dynamics.StandardModels.WindDynamics {
	/// <summary>
	/// Pitch angle control model.
	/// Reference: IEC 61400-27-1:2015, 5.6.5.2.
	/// </summary>
	public class WindContPitchAngleIEC : IdentifiedObject {

		/// <summary>
		/// Maximum pitch positive ramp rate (<i>dtheta</i><i><sub>max</sub></i>) (>
		/// WindContPitchAngleIEC.dthetamin). It is a type-dependent parameter. Unit =
		/// degrees / s.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float dthetamax;
		/// <summary>
		/// Maximum pitch negative ramp rate (<i>dtheta</i><i><sub>min</sub></i><i>)</i> (<
		/// WindContPitchAngleIEC.dthetamax). It is a type-dependent parameter. Unit =
		/// degrees / s.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float dthetamin;
		/// <summary>
		/// Power PI controller integration gain (<i>K</i><i><sub>Ic</sub></i>). It is a
		/// type-dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kic;
		/// <summary>
		/// Speed PI controller integration gain (<i>K</i><i><sub>Iomega</sub></i>). It is
		/// a type-dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kiomega;
		/// <summary>
		/// Power PI controller proportional gain (<i>K</i><i><sub>Pc</sub></i>). It is a
		/// type-dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kpc;
		/// <summary>
		/// Speed PI controller proportional gain (<i>K</i><i><sub>Pomega</sub></i>). It is
		/// a type-dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kpomega;
		/// <summary>
		/// Pitch cross coupling gain (<i>K</i><i><sub>PX</sub></i>). It is a type-
		/// dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU kpx;
		/// <summary>
		/// Maximum pitch angle (<i>theta</i><i><sub>max</sub></i>) (>
		/// WindContPitchAngleIEC.thetamin). It is a type-dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.AngleDegrees thetamax;
		/// <summary>
		/// Minimum pitch angle (<i>theta</i><i><sub>min</sub></i>) (<
		/// WindContPitchAngleIEC.thetamax). It is a type-dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.AngleDegrees thetamin;
		/// <summary>
		/// Pitch time constant (<i>ttheta</i>) (>= 0). It is a type-dependent parameter.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds ttheta;
		/// <summary>
		/// Wind turbine type 3 model with which this pitch control model is associated.
		/// </summary>
		public TC57CIM.IEC61970.Dynamics.StandardModels.WindDynamics.WindTurbineType3IEC WindTurbineType3IEC;

		public WindContPitchAngleIEC(){

		}

		~WindContPitchAngleIEC(){

		}

		public override void Dispose(){

		}

	}//end WindContPitchAngleIEC

}//end namespace WindDynamics
///////////////////////////////////////////////////////////
//  Pss1.cs
//  Implementation of the Class Pss1
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:16 AM
//  Original author: pcha006
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Dynamics.StandardModels.PowerSystemStabilizerDynamics;
namespace TC57CIM.IEC61970.Dynamics.StandardModels.PowerSystemStabilizerDynamics {
	/// <summary>
	/// Italian PSS with three inputs (speed, frequency, power).
	/// </summary>
	public class Pss1 : PowerSystemStabilizerDynamics {

		/// <summary>
		/// Frequency power input gain (<i>K</i><i><sub>F</sub></i>).  Typical value = 5.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float kf;
		/// <summary>
		/// Shaft speed power input gain (<i>K</i><i><sub>omega</sub></i>).  Typical value
		/// = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float komega;
		/// <summary>
		/// Electric power input gain (<i>K</i><i><sub>PE</sub></i>).  Typical value = 0,3.
		/// 
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float kpe;
		/// <summary>
		/// PSS gain (<i>Ks</i>).  Typical value = 1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Float ks;
		/// <summary>
		/// Minimum power PSS enabling (<i>Pmin</i>).  Typical value = 0,25.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU pmin;
		/// <summary>
		/// Lead/lag time constant (<i>T</i><i><sub>10</sub></i>) (>= 0).  Typical value =
		/// 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t10;
		/// <summary>
		/// Washout (<i>T</i><i><sub>5</sub></i>) (>= 0).  Typical value = 3,5.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t5;
		/// <summary>
		/// Filter time constant (<i>T</i><i><sub>6</sub></i>) (>= 0).  Typical value = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t6;
		/// <summary>
		/// Lead/lag time constant (<i>T</i><i><sub>7</sub></i>) (>= 0). If = 0, both
		/// blocks are bypassed.  Typical value = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t7;
		/// <summary>
		/// Lead/lag time constant (<i>T</i><i><sub>8</sub></i>) (>= 0).  Typical value = 0.
		/// 
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t8;
		/// <summary>
		/// Lead/lag time constant (<i>T</i><i><sub>9</sub></i>) (>= 0).  If = 0, both
		/// blocks are bypassed.  Typical value = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t9;
		/// <summary>
		/// Electric power filter time constant (<i>T</i><i><sub>PE</sub></i>) (>= 0).
		/// Typical value = 0,05.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tpe;
		/// <summary>
		/// <font color="#0f0f0f">Signal selector (<i>V</i><i><sub>ADAT</sub></i>).</font>
		/// <font color="#0f0f0f">true = closed (generator power is greater than
		/// <i>Pmin</i>)</font>
		/// <font color="#0f0f0f">false = open (<i>Pe</i> is smaller than <i>Pmin</i>).
		/// </font>
		/// <font color="#0f0f0f">Typical value = true.</font>
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean vadat;
		/// <summary>
		/// Stabilizer output maximum limit (<i>V</i><i><sub>SMN</sub></i>).  Typical value
		/// = -0,06.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vsmn;
		/// <summary>
		/// Stabilizer output minimum limit (<i>V</i><i><sub>SMX</sub></i>).  Typical value
		/// = 0,06.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vsmx;

		public Pss1(){

		}

		~Pss1(){

		}

		public override void Dispose(){

		}

	}//end Pss1

}//end namespace PowerSystemStabilizerDynamics
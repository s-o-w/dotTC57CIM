///////////////////////////////////////////////////////////
//  PssPTIST3.cs
//  Implementation of the Class PssPTIST3
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:17 AM
//  Original author: tsaxton
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Dynamics.StandardModels.PowerSystemStabilizerDynamics;
namespace TC57CIM.IEC61970.Dynamics.StandardModels.PowerSystemStabilizerDynamics {
	/// <summary>
	/// PTI microprocessor-based stabilizer type 3.
	/// </summary>
	public class PssPTIST3 : PowerSystemStabilizerDynamics {

		/// <summary>
		/// Filter coefficient (<i>A0</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU a0;
		/// <summary>
		/// Limiter (<i>Al</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU a1;
		/// <summary>
		/// Filter coefficient (<i>A2</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU a2;
		/// <summary>
		/// Filter coefficient (<i>A3</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU a3;
		/// <summary>
		/// Filter coefficient (<i>A4</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU a4;
		/// <summary>
		/// Filter coefficient (<i>A5</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU a5;
		/// <summary>
		/// Limiter (<i>Al</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU al;
		/// <summary>
		/// Threshold value above which output averaging will be bypassed (<i>Athres</i>).
		/// Typical value = 0,005.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU athres;
		/// <summary>
		/// Filter coefficient (<i>B0</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU b0;
		/// <summary>
		/// Filter coefficient (<i>B1</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU b1;
		/// <summary>
		/// Filter coefficient (<i>B2</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU b2;
		/// <summary>
		/// Filter coefficient (<i>B3</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU b3;
		/// <summary>
		/// Filter coefficient (<i>B4</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU b4;
		/// <summary>
		/// Filter coefficient (<i>B5</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU b5;
		/// <summary>
		/// Limiter (<i>Dl</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU dl;
		/// <summary>
		/// Time step related to activation of controls (<i>deltatc</i>) (>= 0).  Typical
		/// value = 0,025 (0,03 for 50 Hz).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds dtc;
		/// <summary>
		/// Time step frequency calculation (<i>deltatf</i>) (>= 0).  Typical value = 0,025
		/// (0,03 for 50 Hz).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds dtf;
		/// <summary>
		/// Time step active power calculation (<i>deltatp</i>) (>= 0).  Typical value = 0,
		/// 0125  (0,015 for 50 Hz).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds dtp;
		/// <summary>
		/// Digital/analogue output switch (<i>Isw</i>).
		/// true = produce analogue output
		/// false = convert to digital output, using tap selection table.
		/// </summary>
		public bool isw;
		/// <summary>
		/// Gain (<i>K</i>).  Typical value = 9.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU k;
		/// <summary>
		/// Threshold value (<i>Lthres</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU lthres;
		/// <summary>
		/// (<i>M</i>).  <i>M</i> = 2 x <i>H</i>.  Typical value = 5.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU m;
		/// <summary>
		/// Number of control outputs to average (<i>NAV</i>) (1 <=  <i>NAV</i> <= 16).
		/// Typical value = 4.
		/// </summary>
		public float nav;
		/// <summary>
		/// Number of counts at limit to active limit function (<i>NCL</i>) (> 0).
		/// </summary>
		public float ncl;
		/// <summary>
		/// Number of counts until reset after limit function is triggered (<i>NCR</i>).
		/// </summary>
		public float ncr;
		/// <summary>
		/// (<i>Pmin</i>).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU pmin;
		/// <summary>
		/// Time constant (<i>T1</i>) (>= 0).  Typical value = 0,3.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t1;
		/// <summary>
		/// Time constant (<i>T2</i>) (>= 0).  Typical value = 1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t2;
		/// <summary>
		/// Time constant (<i>T3</i>) (>= 0).  Typical value = 0,2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t3;
		/// <summary>
		/// Time constant (<i>T4</i>) (>= 0).  Typical value = 0,05.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t4;
		/// <summary>
		/// Time constant (<i>T5</i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t5;
		/// <summary>
		/// Time constant (<i>T6</i>) (>= 0).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t6;
		/// <summary>
		/// Time constant (<i>Tf</i>) (>= 0).  Typical value = 0,2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tf;
		/// <summary>
		/// Time constant (<i>Tp</i>) (>= 0).  Typical value = 0,2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tp;

		public PssPTIST3(){

		}

		~PssPTIST3(){

		}

		public override void Dispose(){

		}

	}//end PssPTIST3

}//end namespace PowerSystemStabilizerDynamics
///////////////////////////////////////////////////////////
//  PssIEEE2B.cs
//  Implementation of the Class PssIEEE2B
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:17 AM
//  Original author: tsaxton
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Dynamics.StandardModels.PowerSystemStabilizerDynamics;
using TC57CIM.IEC61970.Base.Domain;
namespace TC57CIM.IEC61970.Dynamics.StandardModels.PowerSystemStabilizerDynamics {
	/// <summary>
	/// IEEE 421.5-2005 type PSS2B power system stabilizer model. This stabilizer model
	/// is designed to represent a variety of dual-input stabilizers, which normally
	/// use combinations of power and speed or frequency to derive the stabilizing
	/// signal.
	/// Reference: IEEE 2B 421.5-2005, 8.2.
	/// </summary>
	public class PssIEEE2B : PowerSystemStabilizerDynamics {

		/// <summary>
		/// Type of input signal #1 (rotorAngularFrequencyDeviation, busFrequencyDeviation).
		///  Typical value = rotorAngularFrequencyDeviation.
		/// </summary>
		public InputSignalKind inputSignal1Type;
		/// <summary>
		/// Type of input signal #2 (generatorElectricalPower).  Typical value =
		/// generatorElectricalPower.
		/// </summary>
		public InputSignalKind inputSignal2Type;
		/// <summary>
		/// Stabilizer gain (<i>Ks1</i>).  Typical value = 12.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU ks1;
		/// <summary>
		/// Gain on signal #2 (<i>Ks2</i>).  Typical value = 0,2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU ks2;
		/// <summary>
		/// Gain on signal #2 input before ramp-tracking filter (<i>Ks3</i>).  Typical
		/// value = 1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU ks3;
		/// <summary>
		/// Denominator order of ramp tracking filter (<i>M</i>).  Typical value = 5.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer m;
		/// <summary>
		/// Order of ramp tracking filter (<i>N</i>).  Typical value = 1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer n;
		/// <summary>
		/// Lead/lag time constant (<i>T1</i>) (>= 0).  Typical value = 0,12.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t1;
		/// <summary>
		/// Lead/lag time constant (<i>T10</i>) (>= 0).  Typical value = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t10;
		/// <summary>
		/// Lead/lag time constant (<i>T11</i>) (>= 0).  Typical value = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t11;
		/// <summary>
		/// Lead/lag time constant (<i>T2</i>) (>= 0).  Typical value = 0,02.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t2;
		/// <summary>
		/// Lead/lag time constant (<i>T3</i>) (>= 0).  Typical value = 0,3.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t3;
		/// <summary>
		/// Lead/lag time constant (<i>T4</i>) (>= 0).  Typical value = 0,02.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t4;
		/// <summary>
		/// Time constant on signal #1 (<i>T6</i>) (>= 0).  Typical value = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t6;
		/// <summary>
		/// Time constant on signal #2 (<i>T7</i>) (>= 0).  Typical value = 2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t7;
		/// <summary>
		/// Lead of ramp tracking filter (<i>T8</i>) (>= 0).  Typical value = 0,2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t8;
		/// <summary>
		/// Lag of ramp tracking filter (<i>T9</i>) (>= 0).  Typical value = 0,1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds t9;
		/// <summary>
		/// First washout on signal #1 (<i>Tw1</i>) (>= 0).  Typical value = 2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tw1;
		/// <summary>
		/// Second washout on signal #1 (<i>Tw2</i>) (>= 0).  Typical value = 2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tw2;
		/// <summary>
		/// First washout on signal #2 (<i>Tw3</i>) (>= 0).  Typical value = 2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tw3;
		/// <summary>
		/// Second washout on signal #2 (<i>Tw4</i>) (>= 0).  Typical value = 0.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Seconds tw4;
		/// <summary>
		/// Input signal #1 maximum limit (<i>Vsi1max</i>) (> PssIEEE2B.vsi1min).  Typical
		/// value = 2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vsi1max;
		/// <summary>
		/// Input signal #1 minimum limit (<i>Vsi1min</i>) (< PssIEEE2B.vsi1max).  Typical
		/// value = -2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vsi1min;
		/// <summary>
		/// Input signal #2 maximum limit (<i>Vsi2max</i>) (> PssIEEE2B.vsi2min).  Typical
		/// value = 2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vsi2max;
		/// <summary>
		/// Input signal #2 minimum limit (<i>Vsi2min</i>) (< PssIEEE2B.vsi2max).  Typical
		/// value = -2.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vsi2min;
		/// <summary>
		/// Stabilizer output maximum limit (<i>Vstmax</i>) (> PssIEEE2B.vstmin).  Typical
		/// value = 0,1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vstmax;
		/// <summary>
		/// Stabilizer output minimum limit (<i>Vstmin</i>) (< PssIEEE2B.vstmax).  Typical
		/// value = -0,1.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PU vstmin;

		public PssIEEE2B(){

		}

		~PssIEEE2B(){

		}

		public override void Dispose(){

		}

	}//end PssIEEE2B

}//end namespace PowerSystemStabilizerDynamics
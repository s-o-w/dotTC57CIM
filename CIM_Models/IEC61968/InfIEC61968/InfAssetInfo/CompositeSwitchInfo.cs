///////////////////////////////////////////////////////////
//  CompositeSwitchInfo.cs
//  Implementation of the Class CompositeSwitchInfo
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:01 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.InfIEC61968.InfAssetInfo;
using TC57CIM.IEC61970.Base.Core;
using Assets = TC57CIM.IEC61968.AssetInfo.Assets;
namespace TC57CIM.IEC61968.InfIEC61968.InfAssetInfo {
	/// <summary>
	/// Properties of a composite switch.
	/// </summary>
	public class CompositeSwitchInfo : Assets.AssetInfo {

		/// <summary>
		/// True if multi-phase switch controls all phases concurrently.
		/// </summary>
		public bool ganged;
		/// <summary>
		/// Initial operating mode, with the following values: Automatic, Manual.
		/// </summary>
		public string initOpMode;
		/// <summary>
		/// Breaking capacity, or short circuit rating, is the maximum rated current which
		/// the device can safely interrupt at the rated voltage.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.CurrentFlow interruptingRating;
		/// <summary>
		/// Kind of composite switch.
		/// </summary>
		public CompositeSwitchKind kind;
		/// <summary>
		/// Phases carried, if applicable.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.PhaseCode phaseCode;
		/// <summary>
		/// Supported number of phases, typically 0, 1 or 3.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer phaseCount;
		/// <summary>
		/// Rated voltage.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Voltage ratedVoltage;
		/// <summary>
		/// True if device is capable of being operated by remote control.
		/// </summary>
		public bool remote;
		/// <summary>
		/// Number of switch states represented by the composite switch.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer switchStateCount;

		public CompositeSwitchInfo(){

		}

		~CompositeSwitchInfo(){

		}

		public override void Dispose(){

		}

	}//end CompositeSwitchInfo

}//end namespace InfAssetInfo
///////////////////////////////////////////////////////////
//  CustomerBillingInfo.cs
//  Implementation of the Class CustomerBillingInfo
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:04 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.InfIEC61968.InfCustomers;
using TC57CIM.IEC61968.Customers;
using TC57CIM.IEC61968.Common;
using TC57CIM.IEC61968.InfIEC61968.InfERPSupport;
namespace TC57CIM.IEC61968.InfIEC61968.InfCustomers {
	/// <summary>
	/// The creation of the monthly customer billing statements is the method employed
	/// to notify Customers of charges, adjustments and credits applied to their
	/// account for Services and Products. The actuall billing occurs through an
	/// ErpInvoice. The CustomerBillingInfo includes information from the payment,
	/// collection, meter reading, installed meter, service, site, customer, customer
	/// account, customer agreement, services and pricing subject areas. Each component
	/// price shows up as a separate line item on the ErpInvoice.
	/// The Customer Billing Statement may include collection and account messages,
	/// marketing/civic event messages and bill inserts.
	/// One Customer Billing Statement is produced for all Agreements under a
	/// CustomerAccount per billing cycle date defined in 'CustomerAccount.
	/// billingCycle'.
	/// The history of CustomerBillingInfo, Invoices and Payments is to be maintained
	/// in associated ActivityRecords.
	/// </summary>
	public class CustomerBillingInfo : Document {

		/// <summary>
		/// Business date designated for the billing run which produced this
		/// CustomerBillingInfo.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Date billingDate;
		/// <summary>
		/// Calculated date upon which a customer billing amount is due, used in the
		/// invoicing process to determine when a Customer's Payment is delinquent. It
		/// takes into consideration the regulatory criteria and the Customer's requested
		/// due date. In the absence of a Customer requested due date, the due date is
		/// typically calculated from the regulated number of days and the 'billingDate'.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Date dueDate;
		/// <summary>
		/// Kind of bill customer receives.
		/// </summary>
		public CustomerBillingKind kind;
		/// <summary>
		/// Amount of the last payment received from the customer. It is retained in the
		/// Customer Billing system, although the details of each payment are tracked in
		/// the ERP system.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money lastPaymentAmt;
		/// <summary>
		/// Date of the last payment received from the customer. It is retained in the
		/// Customer Billing system, although the details of each payment are tracked in
		/// the ERP system.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Date lastPaymentDate;
		/// <summary>
		/// Outstanding balance on the CustomerAccount as of the statement date.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money outBalance;
		/// <summary>
		/// Monthly amortized amount due during each billing cycle for the CustomerAccount
		/// balance for which the Payment Plan is set-up.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money pymtPlanAmt;
		/// <summary>
		/// Type of payment plan.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String pymtPlanType;
		public TC57CIM.IEC61968.Customers.CustomerAccount CustomerAccount;
		public TC57CIM.IEC61968.InfIEC61968.InfERPSupport.ErpInvoiceLineItem ErpInvoiceLineItems;

		public CustomerBillingInfo(){

		}

		~CustomerBillingInfo(){

		}

		public override void Dispose(){

		}

	}//end CustomerBillingInfo

}//end namespace InfCustomers
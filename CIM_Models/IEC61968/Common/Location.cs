///////////////////////////////////////////////////////////
//  Location.cs
//  Implementation of the Class Location
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:14 AM
//  Original author: T. Kostic
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.Common;
using TC57CIM.IEC61968.Operations;
using TC57CIM.IEC61970.Base.Core;
using TC57CIM.IEC61970.Base.Meas;
namespace TC57CIM.IEC61968.Common {
	/// <summary>
	/// The place, scene, or point of something where someone or something has been, is,
	/// and/or will be at a given moment in time. It can be defined with one or more
	/// position points (coordinates) in a given coordinate system.
	/// </summary>
	public class Location : IdentifiedObject {

		/// <summary>
		/// (if applicable) Direction that allows field crews to quickly find a given asset.
		/// For a given location, such as a street address, this is the relative direction
		/// in which to find the asset. For example, a streetlight may be located at the
		/// 'NW' (northwest) corner of the customer's site, or a usage point may be located
		/// on the second floor of an apartment building.
		/// </summary>
		public string direction;
		/// <summary>
		/// Electronic address.
		/// </summary>
		public ElectronicAddress electronicAddress;
		/// <summary>
		/// (if applicable) Reference to geographical information source, often external to
		/// the utility.
		/// </summary>
		public string geoInfoReference;
		/// <summary>
		/// Main address of the location.
		/// </summary>
		public StreetAddress mainAddress;
		/// <summary>
		/// Phone number.
		/// </summary>
		public TelephoneNumber phone1;
		/// <summary>
		/// Additional phone number.
		/// </summary>
		public TelephoneNumber phone2;
		/// <summary>
		/// Secondary address of the location. For example, PO Box address may have
		/// different ZIP code than that in the 'mainAddress'.
		/// </summary>
		public StreetAddress secondaryAddress;
		/// <summary>
		/// Status of this location.
		/// </summary>
		public Status status;
		/// <summary>
		/// Classification by utility's corporate standards and practices, relative to the
		/// location itself (e.g., geographical, functional accounting, etc., not a given
		/// property that happens to exist at that location).
		/// </summary>
		public string type;
		/// <summary>
		/// All configuration events created for this location.
		/// </summary>
		public TC57CIM.IEC61968.Common.ConfigurationEvent ConfigurationEvents;
		/// <summary>
		/// The switching order at this location.
		/// </summary>
		public TC57CIM.IEC61968.Operations.SwitchingOrder SwitchingOrder;
		/// <summary>
		/// The crew that is assigned to this locaton.
		/// </summary>
		public TC57CIM.IEC61968.Common.Crew Crew;
		/// <summary>
		/// All power system resources at this location.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.PowerSystemResource PowerSystemResources;
		/// <summary>
		/// Coordinate system used to describe position points of this location.
		/// </summary>
		public TC57CIM.IEC61968.Common.CoordinateSystem CoordinateSystem;
		/// <summary>
		/// Sequence of position points describing this location, expressed in coordinate
		/// system 'Location.CoordinateSystem'.
		/// </summary>
		public TC57CIM.IEC61968.Common.PositionPoint PositionPoints;
		/// <summary>
		/// All measurements at this location.
		/// </summary>
		public TC57CIM.IEC61970.Base.Meas.Measurement Measurements;

		public Location(){

		}

		~Location(){

		}

		public override void Dispose(){

		}

	}//end Location

}//end namespace Common
///////////////////////////////////////////////////////////
//  MerchantAccount.cs
//  Implementation of the Class MerchantAccount
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:15 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.PaymentMetering;
using TC57CIM.IEC61968.Common;
namespace TC57CIM.IEC61968.PaymentMetering {
	/// <summary>
	/// The operating account controlled by merchant agreement, against which the
	/// vendor may vend tokens or receipt payments. Transactions via vendor shift debit
	/// the account and bank deposits via bank statement credit the account.
	/// </summary>
	public class MerchantAccount : Document {

		/// <summary>
		/// The current operating balance of this account.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money currentBalance;
		/// <summary>
		/// The balance of this account after taking into account any pending debits from
		/// VendorShift.merchantDebitAmount and pending credits from BankStatement.
		/// merchantCreditAmount or credits (see also BankStatement attributes and
		/// VendorShift attributes).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money provisionalBalance;
		/// <summary>
		/// All vendor shifts that operate on this merchant account.
		/// </summary>
		public TC57CIM.IEC61968.PaymentMetering.VendorShift VendorShifts;
		/// <summary>
		/// All transactors this merchant account is registered with.
		/// </summary>
		public TC57CIM.IEC61968.PaymentMetering.Transactor Transactors;

		public MerchantAccount(){

		}

		~MerchantAccount(){

		}

		public override void Dispose(){

		}

	}//end MerchantAccount

}//end namespace PaymentMetering
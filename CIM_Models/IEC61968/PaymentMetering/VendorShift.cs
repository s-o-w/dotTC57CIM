///////////////////////////////////////////////////////////
//  VendorShift.cs
//  Implementation of the Class VendorShift
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:31 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.PaymentMetering;
namespace TC57CIM.IEC61968.PaymentMetering {
	/// <summary>
	/// The operating shift for a vendor during which the vendor may transact against
	/// the merchant's account. It aggregates transactions and receipts during the
	/// shift and periodically debits a merchant account. The totals in vendor shift
	/// should always be the sum of totals aggregated in all cashier shifts that were
	/// open under the particular vendor shift.
	/// </summary>
	public class VendorShift : Shift {

		/// <summary>
		/// The amount that is to be debited from the merchant account for this vendor
		/// shift. This amount reflects the sum(PaymentTransaction.transactionAmount).
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money merchantDebitAmount;
		/// <summary>
		/// If true, merchantDebitAmount has been debited from MerchantAccount; typically
		/// happens at the end of VendorShift when it closes.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean posted;
		/// <summary>
		/// All receipts recorded during this vendor shift.
		/// </summary>
		public TC57CIM.IEC61968.PaymentMetering.Receipt Receipts;
		/// <summary>
		/// All transactions recorded during this vendor shift.
		/// </summary>
		public TC57CIM.IEC61968.PaymentMetering.Transaction Transactions;

		public VendorShift(){

		}

		~VendorShift(){

		}

		public override void Dispose(){

		}

	}//end VendorShift

}//end namespace PaymentMetering
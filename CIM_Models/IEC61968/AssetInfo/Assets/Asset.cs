///////////////////////////////////////////////////////////
//  Asset.cs
//  Implementation of the Class Asset
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:32:56 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61968.AssetInfo.Assets;
using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.Common;
using TC57CIM.IEC61970.Base.Meas;
using TC57CIM.IEC61968.InfIEC61968.InfAssets;
using TC57CIM.IEC61970.Base.Core;
using TC57CIM.IEC61968.InfIEC61968.InfERPSupport;
namespace TC57CIM.IEC61968.AssetInfo.Assets {
	/// <summary>
	/// Tangible resource of the utility, including power system equipment, various end
	/// devices, cabinets, buildings, etc. For electrical network equipment, the role
	/// of the asset is defined through PowerSystemResource and its subclasses, defined
	/// mainly in the Wires model (refer to IEC61970-301 and model package IEC61970::
	/// Wires). Asset description places emphasis on the physical characteristics of
	/// the equipment fulfilling that role.
	/// </summary>
	public class Asset : IdentifiedObject {

		/// <summary>
		/// Information on acceptance test.
		/// </summary>
		public AcceptanceTest acceptanceTest;
		/// <summary>
		/// True if asset is considered critical for some reason (for example, a pole with
		/// critical attachments).
		/// </summary>
		public bool critical;
		/// <summary>
		/// Electronic address.
		/// </summary>
		public TC57CIM.IEC61968.Common.ElectronicAddress electronicAddress;
		/// <summary>
		/// Condition of asset at last baseline. Examples include new, rebuilt, overhaul
		/// required, other. Refer to inspection data for information on the most current
		/// condition of the asset.
		/// </summary>
		public string initialCondition;
		/// <summary>
		/// Percentage of initial life expectancy that has been lost as of the last life
		/// expectancy baseline. Represents
		/// (initial life expectancy - current life expectancy) / initial life expectancy.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.PerCent initialLossOfLife;
		/// <summary>
		/// In use dates for this asset.
		/// </summary>
		public InUseDate inUseDate;
		/// <summary>
		/// Indication of whether asset is currently deployed (in use), ready to be put
		/// into use or not available for use.
		/// </summary>
		public InUseStateKind inUseState;
		/// <summary>
		/// Kind of asset. Used in description of asset components in asset instance
		/// templates.
		/// </summary>
		public AssetKind kind;
		/// <summary>
		/// <was lifecycle>
		/// Lifecycle dates for this asset.
		/// </summary>
		public LifecycleDate lifecycleDate;
		/// <summary>
		/// Current lifecycle state of asset.
		/// </summary>
		public AssetLifecycleStateKind lifecycleState;
		/// <summary>
		/// Lot number for this asset. Even for the same model and version number, many
		/// assets are manufactured in lots.
		/// </summary>
		public string lotNumber;
		/// <summary>
		/// Position of asset or asset component. May often be in relation to other assets
		/// or components.
		/// </summary>
		public string position;
		/// <summary>
		/// Purchase price of asset.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Money purchasePrice;
		/// <summary>
		/// Reason asset retired.
		/// </summary>
		public RetiredReasonKind retiredReason;
		/// <summary>
		/// Serial number of this asset.
		/// </summary>
		public string serialNumber;
		/// <summary>
		/// Status of this asset.
		/// </summary>
		public TC57CIM.IEC61968.Common.Status status;
		/// <summary>
		/// Utility-specific classification of Asset and its subtypes, according to their
		/// corporate standards, practices, and existing IT systems (e.g., for management
		/// of assets, maintenance, work, outage, customers, etc.).
		/// </summary>
		public string type;
		/// <summary>
		/// Uniquely tracked commodity (UTC) number.
		/// </summary>
		public string utcNumber;
		/// <summary>
		/// Location of this asset.
		/// </summary>
		public TC57CIM.IEC61968.Common.Location Location;
		/// <summary>
		/// Measurement related to this asset.
		/// </summary>
		public TC57CIM.IEC61970.Base.Meas.Measurement Measurements;
		/// <summary>
		/// Data applicable to this asset.
		/// </summary>
		public TC57CIM.IEC61968.AssetInfo.Assets.AssetInfo AssetInfo;
		public TC57CIM.IEC61968.InfIEC61968.InfAssets.Reconditioning Reconditionings;
		/// <summary>
		/// The model of this asset.
		/// </summary>
		public TC57CIM.IEC61968.AssetInfo.Assets.ProductAssetModel ProductAssetModel;
		/// <summary>
		/// This asset's deployment.
		/// </summary>
		public TC57CIM.IEC61968.AssetInfo.Assets.AssetDeployment AssetDeployment;
		public TC57CIM.IEC61968.InfIEC61968.InfERPSupport.ErpRecDelvLineItem ErpRecDeliveryItems;
		/// <summary>
		/// All configuration events created for this asset.
		/// </summary>
		public TC57CIM.IEC61968.Common.ConfigurationEvent ConfigurationEvents;
		public TC57CIM.IEC61968.InfIEC61968.InfAssets.AssetPropertyCurve AssetPropertyCurves;
		/// <summary>
		/// Container of this asset.
		/// </summary>
		public TC57CIM.IEC61968.AssetInfo.Assets.AssetContainer AssetContainer;
		/// <summary>
		/// All power system resources used to electrically model this asset. For example,
		/// transformer asset is electrically modelled with a transformer and its windings
		/// and tap changer.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.PowerSystemResource PowerSystemResources;
		/// <summary>
		/// Function performed by this asset.
		/// </summary>
		public TC57CIM.IEC61968.AssetInfo.Assets.AssetFunction AssetFunction;
		/// <summary>
		/// All activity records created for this asset.
		/// </summary>
		public TC57CIM.IEC61968.Common.ActivityRecord ActivityRecords;
		/// <summary>
		/// All roles an organisation plays for this asset.
		/// </summary>
		public TC57CIM.IEC61968.AssetInfo.Assets.AssetOrganisationRole OrganisationRoles;
		public TC57CIM.IEC61968.InfIEC61968.InfERPSupport.ErpInventory ErpInventory;

		public Asset(){

		}

		~Asset(){

		}

		public override void Dispose(){

		}

	}//end Asset

}//end namespace Assets
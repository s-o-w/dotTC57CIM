///////////////////////////////////////////////////////////
//  EndDeviceEventType.cs
//  Implementation of the Class EndDeviceEventType
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:07 AM
//  Original author: T. Kostic
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61968.Metering {
	/// <summary>
	/// Detailed description for an event produced by an end device. Values in
	/// attributes allow for creation of recommended codes to be used for identifying
	/// end device events as follows: <type>.<domain>.<subDomain>.<eventOrAction>.
	/// </summary>
	public class EndDeviceEventType : IdentifiedObject {

		/// <summary>
		/// High-level nature of the event. By properly classifying events by a small set
		/// of domain codes, a system can more easily run reports based on the types of
		/// events that have occurred or been received.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String domain;
		/// <summary>
		/// The most specific part of this event type. It is mainly in the form of a verb
		/// that gives action to the event that just occurred.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String eventOrAction;
		/// <summary>
		/// More specific nature of the event, as a further sub-categorisation of 'domain'.
		/// 
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String subDomain;
		/// <summary>
		/// Type of physical device from which the event was created. A value of zero (0)
		/// can be used when the source is unknown.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String type;

		public EndDeviceEventType(){

		}

		~EndDeviceEventType(){

		}

		public override void Dispose(){

		}

	}//end EndDeviceEventType

}//end namespace Metering
///////////////////////////////////////////////////////////
//  EndDeviceControlType.cs
//  Implementation of the Class EndDeviceControlType
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:07 AM
//  Original author: T. Kostic
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61968.Metering {
	/// <summary>
	/// Detailed description for a control produced by an end device. Values in
	/// attributes allow for creation of recommended codes to be used for identifying
	/// end device controls as follows: <type>.<domain>.<subDomain>.<eventOrAction>.
	/// </summary>
	public class EndDeviceControlType : IdentifiedObject {

		/// <summary>
		/// High-level nature of the control.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String domain;
		/// <summary>
		/// The most specific part of this control type. It is mainly in the form of a verb
		/// that gives action to the control that just occurred.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String eventOrAction;
		/// <summary>
		/// More specific nature of the control, as a further sub-categorisation of
		/// 'domain'.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String subDomain;
		/// <summary>
		/// Type of physical device from which the control was created. A value of zero (0)
		/// can be used when the source is unknown.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String type;

		public EndDeviceControlType(){

		}

		~EndDeviceControlType(){

		}

		public override void Dispose(){

		}

	}//end EndDeviceControlType

}//end namespace Metering
///////////////////////////////////////////////////////////
//  EndDevice.cs
//  Implementation of the Class EndDevice
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:06 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.Metering;
using TC57CIM.IEC61968.AssetInfo.Assets;
namespace TC57CIM.IEC61968.Metering {
	/// <summary>
	/// Asset container that performs one or more end device functions. One type of end
	/// device is a meter which can perform metering, load management,
	/// connect/disconnect, accounting functions, etc. Some end devices, such as ones
	/// monitoring and controlling air conditioners, refrigerators, pool pumps may be
	/// connected to a meter. All end devices may have communication capability defined
	/// by the associated communication function(s). An end device may be owned by a
	/// consumer, a service provider, utility or otherwise.
	/// There may be a related end device function that identifies a sensor or control
	/// point within a metering application or communications systems (e.g., water, gas,
	/// electricity).
	/// Some devices may use an optical port that conforms to the ANSI C12.18 standard
	/// for communications.
	/// </summary>
	public class EndDevice : AssetContainer {

		/// <summary>
		/// Automated meter reading (AMR) or other communication system responsible for
		/// communications to this end device.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String amrSystem;
		/// <summary>
		/// Installation code.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.String installCode;
		/// <summary>
		/// If true, this is a premises area network (PAN) device.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean isPan;
		/// <summary>
		/// If true, there is a communicating inverter present.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean isSmartInverter;
		/// <summary>
		/// If true, there is no physical device. As an example, a virtual meter can be
		/// defined to aggregate the consumption for two or more physical meters. Otherwise,
		/// this is a physical hardware device.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean isVirtual;
		/// <summary>
		/// Time zone offset relative to GMT for the location of this end device.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Minutes timeZoneOffset;
		/// <summary>
		/// End device data.
		/// </summary>
		public TC57CIM.IEC61968.Metering.EndDeviceInfo EndDeviceInfo;
		/// <summary>
		/// All end device functions this end device performs.
		/// </summary>
		public TC57CIM.IEC61968.Metering.EndDeviceFunction EndDeviceFunctions;

		public EndDevice(){

		}

		~EndDevice(){

		}

		public override void Dispose(){

		}

	}//end EndDevice

}//end namespace Metering
///////////////////////////////////////////////////////////
//  SwitchingStep.cs
//  Implementation of the Class SwitchingStep
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:27 AM
//  Original author: marga
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.Operations;
namespace TC57CIM.IEC61968.Operations {
	/// <summary>
	/// Atomic switching step; can be part of a switching step group, or part of a
	/// switching plan.
	/// </summary>
	public class SwitchingStep {

		/// <summary>
		/// For a step, if isFreeSequence is set to false or is not specified, all of the
		/// steps in the group must be executed in the order defined by the sequenceNumber
		/// attribute. The sequenceNumber for a step has a different meaning when there are
		/// two or more sequential steps that have the isFreeSequence attribute set to true.
		/// Execution must still be performed in sequenceNumber order until a set of two or
		/// more steps that have isFreeSequence set to true is encountered. In this case,
		/// these steps can be executed in any sequence, until a step is encountered that
		/// has isFreeSequence set to false. All of the steps preceding this step must be
		/// executed before the step can be executed.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Boolean isFreeSequence;
		/// <summary>
		/// Order of this activity in the sequence of activities within the switching plan.
		/// 
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer sequenceNumber;
		/// <summary>
		/// Supports compound switching steps that are made up of several sub steps.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Integer subStepSequenceNumber;
		/// <summary>
		/// The switching step group that contains the switching steps.
		/// </summary>
		public TC57CIM.IEC61968.Operations.SwitchingStepGroup SwitchingStepGroup;
		public TC57CIM.IEC61968.Operations.RevisionHistory RevisionHistory;
		/// <summary>
		/// The switching action that is associated to the switching step.
		/// </summary>
		public TC57CIM.IEC61968.Operations.SwitchingAction SwitchingAction;

		public SwitchingStep(){

		}

		~SwitchingStep(){

		}

		public virtual void Dispose(){

		}

	}//end SwitchingStep

}//end namespace Operations
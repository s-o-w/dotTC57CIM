///////////////////////////////////////////////////////////
//  OperationalRestriction.cs
//  Implementation of the Class OperationalRestriction
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:33:18 AM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using TC57CIM.IEC61970.Base.Domain;
using TC57CIM.IEC61968.AssetInfo.Assets;
using TC57CIM.IEC61970.Base.Core;
using TC57CIM.IEC61968.Common;
namespace TC57CIM.IEC61968.Operations {
	/// <summary>
	/// A document that can be associated with equipment to describe any sort of
	/// restrictions compared with the original manufacturer's specification or with
	/// the usual operational practice e.g. temporary maximum loadings, maximum
	/// switching current, do not operate if bus couplers are open, etc.
	/// In the UK, for example, if a breaker or switch ever mal-operates, this is
	/// reported centrally and utilities use their asset systems to identify all the
	/// installed devices of the same manufacturer's type. They then apply operational
	/// restrictions in the operational systems to warn operators of potential problems.
	/// After appropriate inspection and maintenance, the operational restrictions may
	/// be removed.
	/// </summary>
	public class OperationalRestriction : Document {

		/// <summary>
		/// Interval during which this restriction is applied.
		/// </summary>
		public DateTimeInterval activePeriod;
		/// <summary>
		/// Restricted (new) value; includes unit of measure and potentially multiplier.
		/// </summary>
		public FloatQuantity restrictedValue;
		/// <summary>
		/// Asset model to which this restriction applies.
		/// </summary>
		public TC57CIM.IEC61968.AssetInfo.Assets.ProductAssetModel ProductAssetModel;
		/// <summary>
		/// All equipments to which this restriction applies.
		/// </summary>
		public TC57CIM.IEC61970.Base.Core.Equipment Equipments;

		public OperationalRestriction(){

		}

		~OperationalRestriction(){

		}

		public override void Dispose(){

		}

	}//end OperationalRestriction

}//end namespace Operations